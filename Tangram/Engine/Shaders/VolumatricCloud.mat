#order 2500
#material
Scalar frequent: 1
Scalar raySteps: 5
Color baseColor: 255, 255, 255, 255
Color minPoint: 0, 0, 0, 255
Color maxPoint: 0, 0, 0, 255
#vertex
#version 460 core

#include "../lib/TransformData_def.hmat"
#include "../lib/CameraData_Def.hmat"
#include "../lib/MeshData_Def.hmat"

out vec3 WorldPos;

void main()
{
    WorldPos = (Transforms[gl_InstanceID + gl_BaseInstance] * vec4(pos.x, pos.y, pos.z, 1.0)).xyz;
    gl_Position = camData.pmat * vec4(WorldPos, 1.0);
}
#fragment
#version 410 core
/**
This tab contains all the necessary noise functions required to model a cloud shape.
*/

// Hash by David_Hoskins
#define UI0 1597334673U
#define UI1 3812015801U
#define UI2 uvec2(UI0, UI1)
#define UI3 uvec3(UI0, UI1, 2798796415U)
#define UIF (1.0 / float(0xffffffffU))

#include "../lib/Light_Def.hmat"
#include "../lib/CameraData_Def.hmat"

in vec3 WorldPos;
out vec4 oCol;
uniform float frequent;
uniform float raySteps;
uniform vec4 baseColor;
uniform vec4 minPoint;
uniform vec4 maxPoint;

vec3 hash33(vec3 p)
{
	uvec3 q = uvec3(ivec3(p)) * UI3;
	q = (q.x ^ q.y ^ q.z)*UI3;
	return -1. + 2. * vec3(q) * UIF;
}

float remap(float x, float a, float b, float c, float d)
{
    return (((x - a) / (b - a)) * (d - c)) + c;
}

vec3 remap(vec3 x, vec3 a, vec3 b, vec3 c, vec3 d)
{
    vec3 re = vec3(0);
    re.x = remap(x.x, a.x, b.x, c.x, d.x);
    re.y = remap(x.y, a.y, b.y, c.y, d.y);
    re.z = remap(x.z, a.z, b.z, c.z, d.z);
    return re;
}

// Gradient noise by iq (modified to be tileable)
float gradientNoise(vec3 x, float freq)
{
    // grid
    vec3 p = floor(x);
    vec3 w = fract(x);
    
    // quintic interpolant
    vec3 u = w * w * w * (w * (w * 6. - 15.) + 10.);

    
    // gradients
    vec3 ga = hash33(mod(p + vec3(0., 0., 0.), freq));
    vec3 gb = hash33(mod(p + vec3(1., 0., 0.), freq));
    vec3 gc = hash33(mod(p + vec3(0., 1., 0.), freq));
    vec3 gd = hash33(mod(p + vec3(1., 1., 0.), freq));
    vec3 ge = hash33(mod(p + vec3(0., 0., 1.), freq));
    vec3 gf = hash33(mod(p + vec3(1., 0., 1.), freq));
    vec3 gg = hash33(mod(p + vec3(0., 1., 1.), freq));
    vec3 gh = hash33(mod(p + vec3(1., 1., 1.), freq));
    
    // projections
    float va = dot(ga, w - vec3(0., 0., 0.));
    float vb = dot(gb, w - vec3(1., 0., 0.));
    float vc = dot(gc, w - vec3(0., 1., 0.));
    float vd = dot(gd, w - vec3(1., 1., 0.));
    float ve = dot(ge, w - vec3(0., 0., 1.));
    float vf = dot(gf, w - vec3(1., 0., 1.));
    float vg = dot(gg, w - vec3(0., 1., 1.));
    float vh = dot(gh, w - vec3(1., 1., 1.));
	
    // interpolation
    return va + 
           u.x * (vb - va) + 
           u.y * (vc - va) + 
           u.z * (ve - va) + 
           u.x * u.y * (va - vb - vc + vd) + 
           u.y * u.z * (va - vc - ve + vg) + 
           u.z * u.x * (va - vb - ve + vf) + 
           u.x * u.y * u.z * (-va + vb + vc - vd + ve - vf - vg + vh);
}

// Tileable 3D worley noise
float worleyNoise(vec3 uv, float freq)
{    
    vec3 id = floor(uv);
    vec3 p = fract(uv);
    
    float minDist = 10000.;
    for (float x = -1.; x <= 1.; ++x)
    {
        for(float y = -1.; y <= 1.; ++y)
        {
            for(float z = -1.; z <= 1.; ++z)
            {
                vec3 offset = vec3(x, y, z);
            	vec3 h = hash33(mod(id + offset, vec3(freq))) * .4 + .3; // [.3, .7]
    			h += offset;
            	vec3 d = p - h;
           		minDist = min(minDist, dot(d, d));
            }
        }
    }
    
    // inverted worley noise
    return 1. - minDist;
}

// Fbm for Perlin noise based on iq's blog
float perlinfbm(vec3 p, float freq, int octaves)
{
    float G = exp2(-.85);
    float amp = 1.;
    float noise = 0.;
    for (int i = 0; i < octaves; ++i)
    {
        noise += amp * gradientNoise(p * freq, freq);
        freq *= 2.;
        amp *= G;
    }
    
    return noise;
}

// Tileable Worley fbm inspired by Andrew Schneider's Real-Time Volumetric Cloudscapes
// chapter in GPU Pro 7.
float worleyFbm(vec3 p, float freq)
{
    return worleyNoise(p*freq, freq) * .625 +
        	 worleyNoise(p*freq*2., freq*2.) * .25 +
        	 worleyNoise(p*freq*4., freq*4.) * .125;
}

float cloudNoise(vec3 p, float freq)
{
    float pfbm= mix(1., perlinfbm(p, freq, 3), .5);
    pfbm = abs(pfbm * 2. - 1.); // billowy perlin noise
    float pp = worleyFbm(p, freq);
    pfbm = remap(pfbm, 0., 1., pp, 1.); // perlin-worley

    float wfbm = pp * .625 +
        		 worleyFbm(p, freq * 2) * .125 +
        		 worleyFbm(p, freq * 4) * .25;

    float _cloud = remap(pfbm, wfbm - 1., 1., 0., 1.);
    _cloud = remap(_cloud, .85, 1., 0., 1.); // fake cloud coverage
    return _cloud;
}

vec3 getViewVec()
{
    vec4 ndcPos;
    ndcPos.xy = 2.0 * gl_FragCoord.xy / camData.viewSize - 1;
    ndcPos.z = (2.0 * gl_FragCoord.z - gl_DepthRange.near - gl_DepthRange.far) / (gl_DepthRange.far - gl_DepthRange.near);
    ndcPos.w = 1.0;
    vec4 clipPos = ndcPos;
    clipPos.z = 1.0;
    return normalize((inverse(camData.vmat) * inverse(camData.promat) * clipPos).xyz);
}

vec2 boundaryRayTest(vec3 minP, vec3 maxP, vec3 rayo, vec3 rayd)
{
    vec3 t0 = (minP - rayo) / rayd;
    vec3 t1 = (maxP - rayo) / rayd;
    vec3 tmin = min(t0, t1);
    vec3 tmax = max(t0, t1);
    float dst0 = max(max(tmin.x, tmin.y), tmin.z);
    float dst1 = min(min(tmax.x, tmax.y), tmax.z);
    float d2b = max(0, dst0);
    float dinb = max(0, dst1 - d2b);
    return vec2(d2b, dinb);
}

void main()
{
    vec3 ray = getViewVec();
    vec2 brt = boundaryRayTest(minPoint.xyz, maxPoint.xyz, camData.camPos, ray);
    if (brt[1] == 0)
        discard;
    float zsca = 1.0 / abs(maxPoint.z- minPoint.z);
    int n = int(floor(raySteps));
    float rayLen = brt[1] / float(n);
    vec3 stepRay = ray * rayLen;
    vec3 innerStepRay = -directLight.direction * rayLen;
    vec3 curPos = camData.camPos + brt[0] * ray;
    float density = 0;
    for (int i = 0; i < n; i++) {
        float innerDensity = 0;
        vec3 innerCurPos = curPos;
        vec2 innerBrt = boundaryRayTest(minPoint.xyz, maxPoint.xyz, innerCurPos, -directLight.direction);
        if (innerBrt[1] == 0)
            continue;
        //int innerN = int(innerBrt[1] / rayLen);
        //for (int innerI = 0; innerI < innerN; innerI++) {
            innerDensity += cloudNoise(innerCurPos * zsca, frequent);
            innerCurPos += innerStepRay;
        //}
        // vec4 _pos = camData.pmat * vec4(curPos, 1.0);
        // float depth = _pos.z / _pos.w;
        // if (depth < gl_FragDepth)
        density += exp(-innerDensity) * (1 - exp(-innerDensity * 2));
        curPos += stepRay;
    }

    oCol = baseColor;
    oCol.a *= 1 - exp(-density);
}