#order 1000
#material
Color baseColor: 255, 255, 255, 255
Color chessColor: 255, 255, 255, 255
Color lineColor: 255, 255, 255, 255
Color gridOffset: 0, 0, 0, 255
Scalar gridSpace: 10
Scalar patternX: 100
Scalar patternY: 100
Texture colorMap: white
Scalar metallic: 0.5
Texture metallicMap: white
Scalar roughness: 0.5
Texture roughnessMap: white
Scalar ao: 1.0
Texture aoMap: white
Scalar normalScale: 1
Texture normalMap: black
Scalar emission: 0
Texture emissionMap: white
Texture depthMap: white
#vertex
#version 460 core
#include "lib/TransformData_def.hmat"
#include "lib/CameraData_Def.hmat"
#include "lib/Light_Def.hmat"
#include "lib/MeshData_Def.hmat"

out vec3 WorldPos;
out vec3 WorldScale;
out vec3 Normal;
out vec3 LocalNormal;
out vec2 TexCoords;
out vec4 lightSpacePos;

vec3 getScale(mat4 tmat)
{
    vec3 scale;
    scale[0] = length(vec3(tmat[0][0], tmat[1][0], tmat[2][0]));
    scale[1] = length(vec3(tmat[0][1], tmat[1][1], tmat[2][1]));
    scale[2] = length(vec3(tmat[0][2], tmat[1][2], tmat[2][2]));
    return scale;
}

void main()
{
   mat4 fm = Transforms[ObjectIDs[gl_InstanceID + gl_BaseInstance]];
   WorldPos = (fm * vec4(pos.x, pos.y, pos.z, 1.0)).xyz;
   gl_Position = camData.pmat * vec4(WorldPos, 1.0);
   lightSpacePos = directLight.lmat * vec4(WorldPos, 1.0);
   TexCoords = uv;
   TexCoords.y = 1 - TexCoords.y;
   Normal = normalize(mat3(fm) * norm);
   LocalNormal = norm;
   WorldScale = getScale(fm);
}

#vertex skeleton
#version 460 core
#include "lib/TransformData_def.hmat"
#include "lib/CameraData_Def.hmat"
#include "lib/Light_Def.hmat"
#include "lib/SkeletonMeshData_Def.hmat"

out vec3 WorldPos;
out vec3 WorldScale;
out vec3 Normal;
out vec3 LocalNormal;
out vec2 TexCoords;
out vec4 lightSpacePos;

mat4 getFinalMat()
{
    float tw = weights[0] + weights[1] + weights[2] + weights[3];
    uint bid = ObjectIDs[gl_InstanceID + gl_BaseInstance];
    mat4 fm = Transforms[bid + boneId[0]] * weights[0] / tw;
    if (weights[1] != 0)
        fm += Transforms[bid + boneId[1]] * weights[1] / tw;
    if (weights[2] != 0)
        fm += Transforms[bid + boneId[2]] * weights[2] / tw;
    if (weights[3] != 0)
        fm += Transforms[bid + boneId[3]] * weights[3] / tw;
    return fm;
}

vec3 getScale(mat4 tmat)
{
    vec3 scale;
    scale[0] = length(vec3(tmat[0][0], tmat[1][0], tmat[2][0]));
    scale[1] = length(vec3(tmat[0][1], tmat[1][1], tmat[2][1]));
    scale[2] = length(vec3(tmat[0][2], tmat[1][2], tmat[2][2]));
    return scale;
}

void main()
{
   mat4 fm = getFinalMat();
   WorldPos = (fm * vec4(pos.x, pos.y, pos.z, 1.0)).xyz;
   gl_Position = camData.pmat * vec4(WorldPos, 1.0);
   lightSpacePos = directLight.lmat * vec4(WorldPos, 1.0);
   TexCoords = uv;
   TexCoords.y = 1 - TexCoords.y;
   Normal = normalize(mat3(fm) * norm);
   LocalNormal = norm;
   WorldScale = getScale(fm);
}

#vertex skeleton morph
#version 460 core
#include "lib/TransformData_def.hmat"
#include "lib/CameraData_Def.hmat"
#include "lib/Light_Def.hmat"
#include "lib/SkeletonMeshData_Def.hmat"
#include "lib/MorphData_def.hmat"

out vec3 WorldPos;
out vec3 WorldScale;
out vec3 Normal;
out vec3 LocalNormal;
out vec2 TexCoords;
out vec4 lightSpacePos;

vec3 morphPos()
{
    uint nMorph = uint(nMorphV);
    uint base = gl_VertexID * nMorph;
    vec3 w = vec3(0, 0, 0);
    for (uint i = 0; i < nMorph; i++) {
        w += morphData[(base + i) * 2].xyz * morphWeight[i];
    }
    return pos + w;
}

vec3 morphNorm()
{
    uint nMorph = uint(nMorphV);
    uint base = gl_VertexID * nMorph;
    vec3 w = vec3(0, 0, 0);
    for (uint i = 0; i < nMorph; i++) {
        w += morphData[(base + i) * 2 + 1].xyz * morphWeight[i];
    }
    return norm + w;
}

mat4 getFinalMat()
{
    float tw = weights[0] + weights[1] + weights[2] + weights[3];
    uint bid = ObjectIDs[gl_InstanceID + gl_BaseInstance];
    mat4 fm = Transforms[bid + boneId[0]] * weights[0] / tw;
    if (weights[1] != 0)
        fm += Transforms[bid + boneId[1]] * weights[1] / tw;
    if (weights[2] != 0)
        fm += Transforms[bid + boneId[2]] * weights[2] / tw;
    if (weights[3] != 0)
        fm += Transforms[bid + boneId[3]] * weights[3] / tw;
    return fm;
}

vec3 getScale(mat4 tmat)
{
    vec3 scale;
    scale[0] = length(vec3(tmat[0][0], tmat[1][0], tmat[2][0]));
    scale[1] = length(vec3(tmat[0][1], tmat[1][1], tmat[2][1]));
    scale[2] = length(vec3(tmat[0][2], tmat[1][2], tmat[2][2]));
    return scale;
}

void main()
{
   mat4 fm = getFinalMat();
   WorldPos = (fm * vec4(morphPos(), 1.0)).xyz;
   gl_Position = camData.pmat * vec4(WorldPos, 1.0);
   lightSpacePos = directLight.lmat * vec4(WorldPos, 1.0);
   TexCoords = uv;
   TexCoords.y = 1 - TexCoords.y;
   LocalNormal = morphNorm();
   Normal = normalize(mat3(fm) * LocalNormal);
   WorldScale = getScale(fm);
}

#fragment
#version 460 core

#include "lib/Light_Def.hmat"
#include "lib/CameraData_Def.hmat"

layout (location = 0) out vec4 FragColor;
in vec2 TexCoords;
in vec3 WorldPos;
in vec3 WorldScale;
in vec3 Normal;
in vec3 LocalNormal;
in vec4 lightSpacePos;

uniform vec4 baseColor;
uniform vec4 chessColor;
uniform vec4 lineColor;
uniform vec4 pointColor;
uniform vec4 gridOffset;
uniform float gridSpace;
uniform float patternX;
uniform float patternY;
uniform sampler2D colorMap;
uniform float metallic;
uniform sampler2D metallicMap;
uniform float roughness;
uniform sampler2D roughnessMap;
uniform float ao;
uniform sampler2D aoMap;
uniform float normalScale;
uniform sampler2D normalMap;
uniform float emission;
uniform sampler2D emissionMap;
uniform sampler2D depthMap;

#include "lib/PBR_Lib.hmat"
#include "lib/Basic_FS_Lib.hmat"

vec2 getUVScale(vec3 scale, vec3 N)
{
    vec3 a = round(normalize(pow(abs(N), vec3(8.0))));
    vec2 yz = vec2(scale.y, scale.z);
    vec2 xz = vec2(scale.x, scale.z);
    vec2 xy = vec2(scale.x, scale.y);
    return mix(mix(yz, xy, a.z), xz, a.y);
}

vec4 getUVs(vec2 UV)
{
    vec4 re;
    UV += gridOffset.xy;
    re.xy = UV * 50.0 / (patternX + patternY);
    re.zw = UV * 100.0 / gridSpace;
    return re;
}

vec4 getGirdInfo(sampler2D tex, vec4 UVs)
{
    vec4 info;
    vec4 bc = texture(tex, UVs.xy);
    vec4 sc = texture(tex, UVs.zw);
    info.r = bc.b;
    info.g = bc.r + sc.g;
    info.b = bc.r;
    info.a = bc.b * bc.a;
    return info;
}

void main() {
    vec3 N = normalize(cotangent(Normal, WorldPos, TexCoords) * ((normalize(texture(normalMap, TexCoords) * 2 - 1)).xyz) * normalScale);
    vec3 V = normalize(camData.camPos - WorldPos);

    vec4 info = getGirdInfo(colorMap, getUVs(TexCoords * getUVScale(WorldScale, LocalNormal)));
    vec4 colorMul = baseColor;
    colorMul = mix(colorMul, chessColor, info.r);
    colorMul = mix(colorMul, lineColor, info.g);

    vec3 albedo = colorMul.rgb;
    float alpha = colorMul.a;
    float _roughness = roughness * texture(roughnessMap, TexCoords).r;
    float _metallic = metallic * texture(metallicMap, TexCoords).r;
    float _ao = ao * texture(aoMap, TexCoords).r;

    vec3 F0 = vec3(0.04); 
    F0 = mix(F0, albedo, _metallic);

    // reflectance equation
    vec3 Lo = vec3(0.0);

    if (directLight.intensity != 0) {
        Lo += PBR_Lo_DirectLight(directLight, N, V, albedo, _metallic, _roughness) * ShadowCalculation(depthMap, lightSpacePos, N, directLight.direction);
    }

    for(int i = 0; i < pointLightCount; ++i) {
        if (pointLights[i].intensity != 0) {
            Lo += PBR_Lo_PointLight(pointLights[i], WorldPos, N, V, albedo, _metallic, _roughness);
        }
    }

    vec3 ambient = PBR_Ambient(albedo, _ao);
    vec3 emissionColor = texture(emissionMap, TexCoords).rgb;
    vec3 color = ambient + Lo;//vec3(emission.r * emissionColor.r, emission.g * emissionColor.g, emission.b * emissionColor.b);

    color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0/2.2)) + (emission * baseColor).rgb * emissionColor;

    FragColor = vec4(color, alpha);
}