#order 1000
#material
Color baseColor: 255, 255, 255, 255
Texture colorMap: white
Color shadowColor: 150, 150, 150, 255
Color highlightColor: 255, 255, 255, 255
Color rimColor: 255, 255, 255, 255
Color overColor: 255, 255, 255, 255
Color uvScale: 1.0, 1.0, 0.0, 0.0
Scalar shadowCut: 0.5
Scalar shadowCutSmooth: 0.0
Scalar highlightCut: 0.999
Scalar highlightCutSmooth: 0.0
Scalar rimCut: 0.8
Scalar rimCutSmooth: 0.0
Scalar normalScale: 1.0
Texture normalMap: black
Texture depthMap: white
#vertex use default
#fragment
#version 460 core

#include "lib/Light_Def.hmat"
#include "lib/CameraData_Def.hmat"

layout (location = 0) out vec4 FragColor;
//layout (location = 1) out vec4 ssnMask;
in vec3 Normal;
in vec2 TexCoords;
in vec4 lightSpacePos;
in vec3 WorldPos;

uniform vec4 baseColor;
uniform vec4 shadowColor;
uniform vec4 highlightColor;
uniform vec4 rimColor;
uniform vec4 overColor;
uniform vec4 uvScale;
uniform float shadowCut;
uniform float shadowCutSmooth;
uniform float highlightCut;
uniform float highlightCutSmooth;
uniform float rimCut;
uniform float rimCutSmooth;
uniform float normalScale;
uniform sampler2D colorMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;

#include "lib/Toon_Lib.hmat"

float ShadowCalculation(vec4 fragPosLightSpace, vec3 N, vec3 L)
{
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;

    if (projCoords.z >= 1.0) {
        return 1.0;
    }
    
    projCoords = projCoords * 0.5 + 0.5;

    float currentDepth = projCoords.z;
    
    float shadow = 0.0;
    float bias = 0;//max(0.00005 * (1.0 - dot(N, L)), 0.000005);

    vec2 texelSize = 1.0 / textureSize(depthMap, 0);
    for(int x = -3; x <= 3; ++x)
    {
        for(int y = -3; y <= 3; ++y)
        {
            float pcfDepth = texture(depthMap, projCoords.xy + vec2(x, y) * texelSize).r;
            shadow += currentDepth - bias > pcfDepth ? 0.0 : 1.0;
        }
    }
    shadow /= 49.0;
    return shadow;
}

void main()
{
    vec2 UV = TexCoords * uvScale.xy;
    vec3 N = normalize(cotangent(Normal, WorldPos, UV) * ((normalize(texture(normalMap, UV) * 2 - 1)).xyz) * normalScale);
    vec3 V = normalize(camData.camPos - WorldPos);
    vec4 albedo = texture(colorMap, UV);
    float a = albedo.a * baseColor.a;
    vec3 L = normalize(directLight.direction);
    vec3 H = normalize(V + L);
    vec4 ambience = mix(baseColor, highlightColor, smoothToon(vec4(1.0f), vec4(0.0f), dot(N, H), highlightCut, highlightCutSmooth));
    ambience = mix(shadowColor, ambience, ShadowCalculation(lightSpacePos, N, L));
    ambience = smoothToon(ambience, shadowColor, dot(N, L), shadowCut, shadowCutSmooth);
    ambience = smoothToon(rimColor, ambience, fresnelSchlick(dot(N, normalize(camData.camPos - WorldPos)), 0.33f), rimCut, rimCutSmooth);
    FragColor = albedo * ambience;
    FragColor.a = a;
    FragColor *= overColor;
    //ssnMask = vec4(1);
}