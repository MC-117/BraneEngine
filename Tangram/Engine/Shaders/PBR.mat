#order 1000
#material
Color baseColor: 255, 255, 255, 255
Texture colorMap: white
Scalar metallic: 0.5
Texture metallicMap: white
Scalar roughness: 0.5
Texture roughnessMap: white
Scalar ao: 1.0
Texture aoMap: white
Scalar normalScale: 1
Texture normalMap: black
Scalar emission: 0
Texture emissionMap: white
Texture depthMap: white
#vertex
#version 460 core
// #extension GL_ARB_shader_draw_parameters : require

// #extension GL_ARB_shader_storage_buffer_object : require
layout (std430, binding = 0) buffer CB0
{
    mat4 Transforms[];
};

layout (location = 0) in vec3 pos;
layout (location = 1) in vec2 uv;
layout (location = 2) in vec3 norm;
out vec3 WorldPos;
out vec3 Normal;
out vec2 TexCoords;
out vec4 lightSpacePos;
uniform mat4 pmat;
//uniform mat4 tmat;
uniform mat4 lmat;

void main()
{
   // WorldPos = (tmat * vec4(pos.x, pos.y, pos.z, 1.0)).xyz;
   WorldPos = (Transforms[gl_InstanceID + gl_BaseInstance] * vec4(pos.x, pos.y, pos.z, 1.0)).xyz;
   gl_Position = pmat * vec4(WorldPos, 1.0);
   lightSpacePos = lmat * vec4(WorldPos, 1.0);
   TexCoords = uv;
   TexCoords.y = 1 - TexCoords.y;
   Normal = normalize(mat3(Transforms[gl_InstanceID + gl_BaseInstance]) * norm);
}

#fragment
#version 410 core

struct PointLight
{
    vec3 pos;
    float intensity;
    vec3 color;
};

struct DirectLight
{
    vec3 direction;
    float intensity;
    vec3 color;
};

out vec4 FragColor;
in vec2 TexCoords;
in vec3 WorldPos;
in vec3 Normal;
in vec4 lightSpacePos;

uniform vec3 camPos;
uniform PointLight pointLights[8];
uniform DirectLight directLight;
uniform vec4 baseColor;
uniform sampler2D colorMap;
uniform float metallic;
uniform sampler2D metallicMap;
uniform float roughness;
uniform sampler2D roughnessMap;
uniform float ao;
uniform sampler2D aoMap;
uniform float normalScale;
uniform sampler2D normalMap;
uniform float emission;
uniform sampler2D emissionMap;
uniform sampler2D depthMap;

const float PI = 3.14159265359;

float D_GGX_TR(vec3 N, vec3 H, float a)
{
    float a2 = a*a;
    a2 *= a2;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float k)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx1 = GeometrySchlickGGX(NdotV, k);
    float ggx2 = GeometrySchlickGGX(NdotL, k);

    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 rgbtohsv(vec3 rgb)
{
    float R = rgb.x;
    float G = rgb.y;
    float B = rgb.z;
    vec3 hsv;
    float max1 = max(R, max(G, B));
    float min1 = min(R, min(G, B));
    if (R == max1)
    {
        hsv.x = (G - B) / (max1 - min1);
    }
    if (G == max1)
    {
        hsv.x = 2.0 + (B - R) / (max1 - min1);
    }
    if (B == max1)
    {
        hsv.x = 4.0 + (R - G) / (max1 - min1);
    }
    hsv.x = hsv.x * 60.0;
    if (hsv.x  < 0.0)
    {
        hsv.x = hsv.x + 360.0;
    }
    hsv.z = max1;
    hsv.y = (max1 - min1) / max1;
    return hsv;
}

vec3 hsvtorgb(vec3 hsv)
{
    float R;
    float G;
    float B;
    if (hsv.y == 0.0)
    {
        R = G = B = hsv.z;
    }
    else
    {
        hsv.x = hsv.x / 60.0;
        int i = int(hsv.x);
        float f = hsv.x - float(i);
        float a = hsv.z * (1.0 - hsv.y);
        float b = hsv.z * (1.0 - hsv.y * f);
        float c = hsv.z * (1.0 - hsv.y * (1.0 - f));
        if (i == 0)
        {
            R = hsv.z;
            G = c;
            B = a;
        }
        else if (i == 1)
        {
            R = b;
            G = hsv.z;
            B = a;
        }
        else if (i == 2)
        {
            R = a;
            G = hsv.z;
            B = c;
        }
        else if (i == 3)
        {
            R = a;
            G = b;
            B = hsv.z;
        }
        else if (i == 4)
        {
            R = c;
            G = a;
            B = hsv.z;
        }
        else
        {
            R = hsv.z;
            G = a;
            B = b;
        }
    }
    return vec3(R, G, B);
}

mat3 cotangent( vec3 N, vec3 p, vec2 uv )
{
    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( p );
    vec3 dp2 = dFdy( p );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );

    // solve the linear system
    vec3 dp2perp = cross( dp2, N );
    vec3 dp1perp = cross( N, dp1 );
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;

    // construct a scale-invariant frame 
    float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
    return mat3( T * invmax, B * invmax, N );
}

float ShadowCalculation(vec4 fragPosLightSpace, vec3 N, vec3 L)
{
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;

    if (projCoords.z >= 1.0) {
        return 1.0;
    }
    
    projCoords = projCoords * 0.5 + 0.5;

    float currentDepth = projCoords.z;
    
    float shadow = 0.0;
    float bias = max(0.00005 * (1.0 - dot(N, L)), 0.000005);

    vec2 texelSize = 1.0 / textureSize(depthMap, 0);
    for(int x = -3; x <= 3; ++x)
    {
        for(int y = -3; y <= 3; ++y)
        {
            float pcfDepth = texture(depthMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth ? 0.0 : 1.0;        
        }    
    }
    shadow /= 49.0;
    return shadow;
}

void main() {
    vec3 N = normalize(cotangent(Normal, WorldPos, TexCoords) * ((normalize(texture(normalMap, TexCoords) * 2 - 1)).xyz) * normalScale) ;
    vec3 V = normalize(camPos - WorldPos);
    vec3 albedo = baseColor.rgb * texture(colorMap, TexCoords).rgb;
    float alpha = baseColor.a * texture(colorMap, TexCoords).a;
    float _roughness = roughness * texture(roughnessMap, TexCoords).r;
    float _metallic = metallic * texture(metallicMap, TexCoords).r;
    float _ao = ao * texture(aoMap, TexCoords).r;

    vec3 F0 = vec3(0.04); 
    F0 = mix(F0, albedo, _metallic);

    // reflectance equation
    vec3 Lo = vec3(0.0);

    for(int i = -1; i < 8; ++i) 
    {
        // calculate per-light radiance
        if(i == -1 && directLight.intensity == 0)
            continue;
        if(i >= 0 && pointLights[i].intensity == 0)
            continue;
        vec3 L;
        if(i == -1)
            L = normalize(directLight.direction);
        else
            L = normalize(pointLights[i].pos - WorldPos);
        vec3 H = normalize(V + L);
        float attenuation;
        if(i == -1)
            attenuation = 1.0;
        else {
            float distance = length(pointLights[i].pos - WorldPos);
            attenuation = 1.0 / (distance * distance);
        }
        vec3 radiance;
        if(i == -1)
            radiance = directLight.color * directLight.intensity * attenuation;
        else
            radiance = pointLights[i].color * pointLights[i].intensity * attenuation;        

        // cook-torrance brdf
        float NDF = D_GGX_TR(N, H, _roughness);        
        float G = GeometrySmith(N, V, L, _roughness);      
        vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);       

        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - _metallic;

        vec3 nominator = NDF * G * F;
        float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001; 
        vec3 specular = nominator / denominator;

        // add to outgoing radiance Lo
        float NdotL = max(dot(N, L), 0.0);
        if (i == -1)
            Lo += (kD * albedo / PI + specular) * radiance * NdotL * ShadowCalculation(lightSpacePos, N, L);
        else
            Lo += (kD * albedo / PI + specular) * radiance * NdotL;
    }

    vec3 ambient = vec3(0.03) * albedo * _ao;
    vec3 emissionColor = texture(emissionMap, TexCoords).rgb;
    vec3 color = ambient + Lo;//vec3(emission.r * emissionColor.r, emission.g * emissionColor.g, emission.b * emissionColor.b);

    color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0/2.2)) + (emission * baseColor).rgb * emissionColor;

    FragColor = vec4(color, alpha);
}