#order 2450
#material
Color baseColor: 255, 255, 255, 0
Color outlineColor: 255, 255, 255, 44
#vertex
#version 460 core
layout (std430, binding = 0) buffer CB0
{
    mat4 Transforms[];
};
layout (location = 0) in vec3 pos;
layout (location = 1) in vec2 uv;
layout (location = 2) in vec3 norm;
uniform mat4 pmat;

void main()
{
   gl_Position = pmat * Transforms[gl_InstanceID + gl_BaseInstance] * vec4(pos.x, pos.y, pos.z, 1.0);
}
#geometry
#version 410 core
layout (triangles) in;
layout (triangle_strip, max_vertices = 3) out;
out vec3 dist;
void main()
{
   vec2 s = vec2(1920, 1080) / 2;
   vec2 p0 = gl_in[0].gl_Position.xy / gl_in[0].gl_Position.w;
   vec2 p1 = gl_in[1].gl_Position.xy / gl_in[1].gl_Position.w;
   vec2 p2 = gl_in[2].gl_Position.xy / gl_in[2].gl_Position.w;
   vec2 v1 = s * (p1 - p0);
   vec2 v2 = s * (p2 - p0);
   vec2 v0 = s * (p2 - p1);
   float c = abs(v1.x * v2.y - v1.y * v2.x);
   float h = c / length(v0);
   dist = vec3(h, 0, 0);
   dist *= gl_in[0].gl_Position.w;
   gl_Position = gl_in[0].gl_Position;
   EmitVertex();
   h = c / length(v1);
   dist = vec3(0, h, 0);
   dist *= gl_in[1].gl_Position.w;
   gl_Position = gl_in[1].gl_Position;
   EmitVertex();
   h = c / length(v2);
   dist = vec3(0, 0, h);
   dist *= gl_in[2].gl_Position.w;
   gl_Position = gl_in[2].gl_Position;
   EmitVertex();
   EndPrimitive();
}
#fragment
#version 410 core
uniform vec4 baseColor;
uniform vec4 outlineColor;
in vec3 dist;
out vec4 oCol;
void main()
{
   float d = min(dist[0], min(dist[1], dist[2])) * gl_FragCoord.w * 2;
   float I = exp2(-0.5 * d);
   oCol = mix(baseColor, outlineColor, I);
}